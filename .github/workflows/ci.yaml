# .github/workflows/ci.yaml
name: CI Pipeline (Format, Test, Coverage)

on:
  push:
    branches: ['**'] # 監聽所有分支的 push 事件

jobs:
  lint_test_coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # 允許 workflow 修改 repository 內容 (例如：提交格式化後的程式碼)
      actions: read     # 允許 workflow讀取 artifacts (例如：下載先前的覆蓋率報告)

    steps:
    - name: Checkout repository (檢查程式碼)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 獲取所有歷史記錄，用於 git diff (格式化檢查) 和其他 git 操作
        token: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN 用於提交更改。

    - name: Set up Node.js (設定 Node.js 環境)
      uses: actions/setup-node@v4
      with:
        node-version: '20.x' # 建議使用一個穩定的 LTS 版本
        cache: 'npm'

    - name: Install dependencies (安裝專案依賴)
      run: npm ci # 使用 npm ci 以確保可重現的建置

    - name: Install tools (安裝 jq)
      run: |
        sudo apt-get update && sudo apt-get install -y jq

    # --- 自動格式化程式碼 (Auto Formatting) ---
    - name: Auto format code (使用 Prettier 或您設定的 format script)
      id: format_code
      run: |
        # 確保 Prettier 是 devDependency 或全域安裝
        # 建議在 package.json 中設定 "format": "prettier --write ."
        if npm run format --if-present; then
          echo "npm run format executed."
        else
          echo "npm run format not found, trying npx prettier..."
          # --ignore-unknown 是為了避免 Prettier 因不認識的檔案類型而失敗
          npx prettier --write . --ignore-unknown
        fi

        # 檢查是否有檔案被格式化修改
        if git diff --quiet; then
          echo "No formatting changes needed. (程式碼無需格式化)"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "Formatting changes detected. (偵測到格式變更)"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push formatting changes (提交並推送格式化變更)
      if: steps.format_code.outputs.changed == 'true'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .
        # [skip ci] 避免觸發另一個 workflow run
        git commit -m "Chore: Apply automatic code formatting [skip ci]"

        # 推送到正確的分支 (github.ref_name is the branch for push events)
        BRANCH_NAME="${{ github.ref_name }}"
        echo "Pushing formatting changes to $BRANCH_NAME ..."
        git push origin "HEAD:$BRANCH_NAME"

    # --- 執行測試並產生覆蓋率報告 (Testing and Coverage) ---
    - name: Run tests and generate coverage (執行測試並產生覆蓋率)
      id: run_tests
      run: npm test # 此命令必須設定為執行 'vitest run --coverage'

    - name: Upload HTML Coverage Report (上傳 HTML 格式的覆蓋率報告)
      # 'always()' 確保即使測試失敗，也會嘗試上傳報告
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: html-coverage-report-${{ github.run_id }}-${{ github.ref_name }} # Add branch to artifact name for clarity
        path: coverage/ # Vitest 預設的 HTML 報告目錄
        retention-days: 7 # Artifact 保留天數

    - name: Prepare current coverage summary (準備當前覆蓋率摘要)
      # 僅在測試成功時執行
      if: steps.run_tests.outcome == 'success'
      run: |
        if [ ! -f coverage/coverage-summary.json ]; then
          echo "Error: coverage/coverage-summary.json not found!"
          exit 1
        fi
        # 複製摘要檔案，用於比較和作為 artifact 上傳
        cp coverage/coverage-summary.json current-coverage-summary.json
        echo "Coverage summary prepared: current-coverage-summary.json"

    - name: Extract current coverage percentage (提取當前覆蓋率百分比)
      if: steps.run_tests.outcome == 'success'
      id: current_coverage_extraction
      run: |
        # 從 Vitest 產生的 coverage-summary.json 中提取總體行覆蓋率
        # 若您的覆蓋率指標不同 (例如 branches, statements)，請調整 jq 查詢
        COVERAGE_PCT=$(jq '.total.lines.pct' current-coverage-summary.json)

        # 檢查是否成功提取到數字
        if ! [[ "$COVERAGE_PCT" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
          echo "Error: Could not extract a valid coverage percentage. Value: '$COVERAGE_PCT'"
          # 設置為0以避免後續腳本錯誤，但這表示覆蓋率提取有問題
          COVERAGE_PCT=0
        fi
        echo "Current coverage for branch ${{ github.ref_name }}: $COVERAGE_PCT%"
        echo "percentage=$COVERAGE_PCT" >> $GITHUB_OUTPUT

    # --- 覆蓋率比較 (Coverage Comparison) ---
    - name: Download baseline coverage summary for current branch (下載當前分支的基準覆蓋率摘要)
      # 此步驟嘗試從當前分支的最新成功執行中下載覆蓋率摘要作為比較基準
      if: steps.run_tests.outcome == 'success'
      id: download_baseline_coverage
      uses: dawidd6/action-download-artifact@v3
      with:
        # Workflow 名稱或 ID，用於查找 artifact
        workflow: ${{ github.workflow_id || github.workflow }}
        # 從當前分支的最新成功執行中下載
        branch: ${{ github.ref_name }}
        workflow_conclusion: success # Only download from successful runs
        # Artifact 的名稱，應與上傳時一致
        name: coverage-summary-baseline # This artifact stores the baseline for each branch
        path: ./baseline-coverage-data/ # 下載到此目錄
        github_token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true # 如果 artifact 不存在 (例如分支首次執行)，則繼續執行

    - name: Compare coverage with baseline (與基準覆蓋率比較)
      if: steps.run_tests.outcome == 'success'
      id: compare_coverage
      run: |
        CURRENT_PCT=${{ steps.current_coverage_extraction.outputs.percentage }}
        echo "Current extracted coverage for branch ${{ github.ref_name }}: $CURRENT_PCT%"

        # 下載的 artifact 檔案路徑 (dawidd6 action 會保留原始檔名)
        BASELINE_SUMMARY_FILE="./baseline-coverage-data/current-coverage-summary.json"
        PREVIOUS_PCT=0 # 如果沒有基準，預設為 0%

        if [[ -f "$BASELINE_SUMMARY_FILE" ]]; then
          PREVIOUS_PCT_RAW=$(jq '.total.lines.pct' "$BASELINE_SUMMARY_FILE")
          if [[ "$PREVIOUS_PCT_RAW" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            PREVIOUS_PCT=$PREVIOUS_PCT_RAW
          else
            echo "Warning: Could not extract valid coverage percentage from baseline file for branch ${{ github.ref_name }}. Value: '$PREVIOUS_PCT_RAW'. Using 0 for comparison."
            PREVIOUS_PCT=0
          fi
          echo "Baseline coverage for branch ${{ github.ref_name }} (from its last successful run): $PREVIOUS_PCT%"
        else
          echo "No baseline coverage data found for branch ${{ github.ref_name }}. Assuming 0% for previous coverage. (可能是此分支首次執行或找不到基準 Artifact)"
        fi

        # 使用 bc 進行浮點數比較
        if (( $(echo "$CURRENT_PCT < $PREVIOUS_PCT" | bc -l) )); then
          echo "Error: Current coverage ($CURRENT_PCT%) on branch ${{ github.ref_name }} is less than its baseline coverage ($PREVIOUS_PCT%). Failing job. (錯誤：本次覆蓋率低於基準覆蓋率)"
          echo "comparison_passed=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "Coverage check passed for branch ${{ github.ref_name }}: Current ($CURRENT_PCT%) >= Baseline ($PREVIOUS_PCT%). (覆蓋率檢查通過)"
          echo "comparison_passed=true" >> $GITHUB_OUTPUT
        fi

    # --- 更新基準覆蓋率 (Update Baseline Coverage) ---
    - name: Upload new baseline coverage summary for current branch (上傳當前分支新的基準覆蓋率摘要)
      # 條件：
      # 1. 必須是推送到分支的事件。
      # 2. 測試必須成功。
      # 3. 覆蓋率比較必須通過 (即沒有因為覆蓋率下降而 'exit 1')。
      if: |
        github.event_name == 'push' &&
        steps.run_tests.outcome == 'success' &&
        steps.compare_coverage.outputs.comparison_passed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-summary-baseline # 使用固定的名稱，此 artifact 會與特定分支的 workflow run 關聯
        path: current-coverage-summary.json # 上傳本次執行產生的覆蓋率摘要
        retention-days: 90 # Artifact 保留天數
